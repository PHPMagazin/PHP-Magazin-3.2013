macro class {    case $className:ident extends $parentName:ident {        $(property $propertyName:ident = $propertyAssignment) (,) ...        constructor $constructorParams { $constructorBody ... }        $($methodName:ident $methodParams $methodBody) ... } => {        var $className = (function() {            var $className = function $constructorParams {               $(this.$propertyName = $propertyAssignment;) ...                $constructorBody ...            };            __extend($className, $parentName);            $($className.prototype.$methodName = function $methodParams $methodBody;) ...            return $className;        })();    }}if (typeof __extend === "undefined") {    __extend = function(child, parent) {        var empty = function() {};        empty.prototype = parent.prototype;        child.prototype = new empty();        child.prototype.__super__ = parent;    }}class Tux extends Animal {    property type = "Penguin"    constructor(name) {        this.__super__.call(this, name);    }    getType() {        return this.type;    }}